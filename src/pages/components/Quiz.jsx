"use client";
import React, { useState, useEffect } from "react";
import Link from "next/link";

// --- Quiz ”©–≥”©–≥–¥”©–ª (10 –∞—Å—É—É–ª—Ç) ---
const quizData = [
  {
    question: "‚Äú–û–±—ä–µ–∫—Ç‚Äù –≥—ç–∂ —é—É –≤—ç?",
    options: [
      "–ë–æ–¥–∏—Ç –µ—Ä—Ç”©–Ω—Ü–∏–π–Ω –∞–ª–∏–≤–∞–∞ –∑“Ø–π–ª, “Ø–∑—ç–≥–¥—ç–ª",
      "–ó”©–≤—Ö”©–Ω –∫–æ–º–ø—å—é—Ç–µ—Ä–∏–π–Ω –ø—Ä–æ–≥—Ä–∞–º",
      "–ó—É—Ä–∞–≥",
      "–¢–æ–æ",
    ],
    answer: "–ë–æ–¥–∏—Ç –µ—Ä—Ç”©–Ω—Ü–∏–π–Ω –∞–ª–∏–≤–∞–∞ –∑“Ø–π–ª, “Ø–∑—ç–≥–¥—ç–ª",
  },
  {
    question: "–û–±—ä–µ–∫—Ç —è–º–∞—Ä —à–∏–Ω–∂ —á–∞–Ω–∞—Ä—Ç–∞–π –±–∞–π–¥–∞–≥ –≤—ç?",
    options: [
      "–ó”©–≤—Ö”©–Ω ”©–Ω–≥”©",
      "–ó”©–≤—Ö”©–Ω —Ö—ç–º–∂—ç—ç",
      "”®–Ω–≥”©, —Ö—ç–ª–±—ç—Ä, —Ö—ç–º–∂—ç—ç, –±–∞–π—Ä–ª–∞–ª",
      "–ó”©–≤—Ö”©–Ω –Ω—ç—Ä",
    ],
    answer: "”®–Ω–≥”©, —Ö—ç–ª–±—ç—Ä, —Ö—ç–º–∂—ç—ç, –±–∞–π—Ä–ª–∞–ª",
  },
  {
    question: "–û–±—ä–µ–∫—Ç—ã–Ω “Ø–π–ª –∞–∂–∏–ª–ª–∞–≥–∞–∞ –≥—ç–∂ —é—É –≤—ç?",
    options: [
      "–û–±—ä–µ–∫—Ç—ã–Ω –Ω—ç—Ä",
      "–û–±—ä–µ–∫—Ç—ã–Ω —Ö–∏–π–∂ —á–∞–¥–∞—Ö –∞–∂–∏–ª",
      "–û–±—ä–µ–∫—Ç—ã–Ω —Ö—ç–º–∂—ç—ç",
      "–û–±—ä–µ–∫—Ç—ã–Ω ”©–Ω–≥”©",
    ],
    answer: "–û–±—ä–µ–∫—Ç—ã–Ω —Ö–∏–π–∂ —á–∞–¥–∞—Ö –∞–∂–∏–ª",
  },
  {
    question: "–ù–∞—Ä, —Å–∞—Ä, –æ–¥–æ–¥ —è–º–∞—Ä –æ–±—ä–µ–∫—Ç–æ–¥ —Ö–∞–º–∞–∞—Ä–∞—Ö –≤—ç?",
    options: [
      "–ë–∞–π–≥–∞–ª–∏–π–Ω –æ–±—ä–µ–∫—Ç",
      "–•–∏–π–º—ç–ª –æ–±—ä–µ–∫—Ç",
      "–°—ç—Ç–≥—ç—Ö“Ø–π–Ω –æ–±—ä–µ–∫—Ç",
      "–ó–∞–≥–≤–∞—Ä",
    ],
    answer: "–ë–∞–π–≥–∞–ª–∏–π–Ω –æ–±—ä–µ–∫—Ç",
  },
  {
    question: "–ó–∞–≥–≤–∞—Ä –≥—ç–∂ —é—É –≤—ç?",
    options: [
      "–ñ–∏–∂–∏–≥ —Ö—ç–º–∂—ç—ç—Ç—ç–π –∑“Ø–π–ª",
      "–û–±—ä–µ–∫—Ç—ã–≥ –æ—Ä–ª—É—É–ª–∂ –¥“Ø—Ä—Å–ª—ç–Ω “Ø–∑“Ø“Ø–ª—Å—ç–Ω –∑“Ø–π–ª",
      "–ë–æ–¥–∏—Ç –æ–±—ä–µ–∫—Ç",
      "–ó—É—Ä–∞–≥",
    ],
    answer: "–û–±—ä–µ–∫—Ç—ã–≥ –æ—Ä–ª—É—É–ª–∂ –¥“Ø—Ä—Å–ª—ç–Ω “Ø–∑“Ø“Ø–ª—Å—ç–Ω –∑“Ø–π–ª",
  },
  {
    question: "–ì–∞–∑—Ä—ã–Ω –∑—É—Ä–∞–≥ —è–º–∞—Ä —Ç”©—Ä–ª–∏–π–Ω –∑–∞–≥–≤–∞—Ä –≤—ç?",
    options: ["–ë–æ–¥–∏—Ç", "–ë—ç–ª–≥—ç–¥–ª–∏–π–Ω", "–¢–æ–æ–Ω", "–¢–µ–∫—Å—Ç—ç–Ω"],
    answer: "–ë—ç–ª–≥—ç–¥–ª–∏–π–Ω",
  },
  {
    question: "–ó–∞–≥–≤–∞—Ä—ã–Ω –≥–æ–ª –∑–æ—Ä–∏–ª–≥–æ —é—É –≤—ç?",
    options: [
      "–ß–∏–º—ç–≥–ª—ç–ª —Ö–∏–π—Ö",
      "–°—É–¥–ª–∞—Ö, —Ç—É—Ä—à–∏—Ö, —Ç”©—Å”©”©–ª”©—Ö",
      "–ó—É—Ä–∞–≥ –∑—É—Ä–∞—Ö",
      "–ë–∏—á–∏—Ö",
    ],
    answer: "–°—É–¥–ª–∞—Ö, —Ç—É—Ä—à–∏—Ö, —Ç”©—Å”©”©–ª”©—Ö",
  },
  {
    question: "–•“Ø“Ø—Ö—ç–ª–¥—ç–π –±–∞–π—à–∏–Ω —è–º–∞—Ä –∑–∞–≥–≤–∞—Ä –≤—ç?",
    options: [
      "–¢–æ–æ–Ω –∑–∞–≥–≤–∞—Ä",
      "–ë–æ–¥–∏—Ç (–º–∞—Ç–µ—Ä–∏–∞–ª–ª–∞–≥) –∑–∞–≥–≤–∞—Ä",
      "–ë—ç–ª–≥—ç–¥–ª–∏–π–Ω –∑–∞–≥–≤–∞—Ä",
      "–î–∏–∂–∏—Ç–∞–ª –∑–∞–≥–≤–∞—Ä",
    ],
    answer: "–ë–æ–¥–∏—Ç (–º–∞—Ç–µ—Ä–∏–∞–ª–ª–∞–≥) –∑–∞–≥–≤–∞—Ä",
  },
  {
    question: "–°—ç—Ç–≥—ç—Ö“Ø–π–Ω –æ–±—ä–µ–∫—Ç –≥—ç–∂ —é—É –≤—ç?",
    options: [
      "–ë–æ–¥–∏—Ç –∑“Ø–π–ª",
      "–•“Ø–Ω–∏–π —Ç–æ–ª–≥–æ–π–¥ –±–∏–π –±–æ–ª—Å–æ–Ω —Ç”©—Å”©”©–ª”©–ª",
      "–ö–æ–º–ø—å—é—Ç–µ—Ä–∏–π–Ω –ø—Ä–æ–≥—Ä–∞–º",
      "–ú–∞—Ç–µ—Ä–∏–∞–ª–ª–∞–≥ –∑“Ø–π–ª",
    ],
    answer: "–•“Ø–Ω–∏–π —Ç–æ–ª–≥–æ–π–¥ –±–∏–π –±–æ–ª—Å–æ–Ω —Ç”©—Å”©”©–ª”©–ª",
  },
  {
    question: "–¢–æ–æ–Ω –∑–∞–≥–≤–∞—Ä—ã–Ω –∂–∏—à—ç—ç –∞–ª—å –Ω—å –≤—ç?",
    options: [
      "–ì–∞–∑—Ä—ã–Ω –∑—É—Ä–∞–≥",
      "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∏–π–Ω —Ç–æ–º—ä—ë–æ",
      "–•“Ø“Ø—Ö—ç–ª–¥—ç–π –±–∞–π—à–∏–Ω",
      "–ó—É—Ä–∞–≥",
    ],
    answer: "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∏–π–Ω —Ç–æ–º—ä—ë–æ",
  },
];

export default function QuizApp() {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [score, setScore] = useState(0);
  const [showResult, setShowResult] = useState(false);
  const [selectedOption, setSelectedOption] = useState(null);
  const [previousScores, setPreviousScores] = useState([]);
  const [showPrevious, setShowPrevious] = useState(false);

  useEffect(() => {
    const savedScores = JSON.parse(localStorage.getItem("allScores")) || [];
    setPreviousScores(savedScores);
  }, []);

  const handleAnswer = (option) => {
    setSelectedOption(option);
    let newScore = score;

    if (option === quizData[currentQuestion].answer) {
      newScore += 1;
      setScore(newScore);
    }

    setTimeout(() => {
      const next = currentQuestion + 1;
      if (next < quizData.length) {
        setCurrentQuestion(next);
        setSelectedOption(null);
      } else {
        setShowResult(true);
        const savedScores = JSON.parse(localStorage.getItem("allScores")) || [];
        savedScores.push(newScore);
        localStorage.setItem("allScores", JSON.stringify(savedScores));
        setPreviousScores(savedScores);
      }
    }, 1200);
  };

  const restartQuiz = () => {
    setCurrentQuestion(0);
    setScore(0);
    setShowResult(false);
    setSelectedOption(null);
    setShowPrevious(false);
  };

  const xp = score * 10;
  const average = Math.round((score / quizData.length) * 100);

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-blue-100 to-purple-200 p-6">
      <div className="bg-white shadow-2xl rounded-3xl p-8 max-w-xl w-full relative border-t-8 border-blue-500">
        {!showResult ? (
          <div>
            <h2 className="text-2xl font-bold mb-4 text-blue-700">
              –ê—Å—É—É–ª—Ç {currentQuestion + 1} / {quizData.length}
            </h2>

            <button
              onClick={() => setShowPrevious(!showPrevious)}
              className="mb-3 bg-yellow-400 hover:bg-yellow-500 text-white py-2 px-4 rounded-lg font-medium shadow transition"
            >
              {showPrevious ? "”®–º–Ω”©—Ö –æ–Ω–æ–æ —Ö–∞–∞—Ö" : "”®–º–Ω”©—Ö –æ–Ω–æ–æ —Ö–∞—Ä–∞—Ö"}
            </button>

            {showPrevious && previousScores.length > 0 && (
              <div className="mb-6 max-h-40 overflow-y-auto p-3 border rounded-xl bg-gray-50">
                {previousScores.map((s, i) => (
                  <div
                    key={i}
                    className="text-sm text-gray-700 py-1 border-b last:border-b-0"
                  >
                    –¢–µ—Å—Ç {i + 1}:{" "}
                    <span className="font-semibold">{s} –æ–Ω–æ–æ</span>
                  </div>
                ))}
              </div>
            )}

            <p className="mb-6 text-lg font-medium text-gray-800">
              {quizData[currentQuestion].question}
            </p>

            <div className="space-y-3">
              {quizData[currentQuestion].options.map((option, index) => {
                let buttonStyle =
                  "w-full py-3 px-5 rounded-xl shadow text-white font-medium transition ";
                if (selectedOption) {
                  if (option === quizData[currentQuestion].answer)
                    buttonStyle += "bg-green-500";
                  else if (option === selectedOption)
                    buttonStyle += "bg-red-500";
                  else buttonStyle += "bg-blue-400";
                } else {
                  buttonStyle += "bg-blue-500 hover:bg-blue-600";
                }

                return (
                  <button
                    key={index}
                    onClick={() => !selectedOption && handleAnswer(option)}
                    className={buttonStyle}
                  >
                    {option}
                  </button>
                );
              })}
            </div>
          </div>
        ) : (
          <div className="text-center">
            <h2 className="text-3xl font-extrabold mb-4 text-green-700">
              üéâ –¢–µ—Å—Ç –¥—É—É—Å–ª–∞–∞!
            </h2>
            <p className="text-lg mb-2">
              –ó”©–≤ —Ö–∞—Ä–∏—É–ª—Ç:{" "}
              <span className="font-semibold">
                {score} / {quizData.length}
              </span>
            </p>
            <p className="text-lg mb-2 text-green-600">XP: {xp}</p>
            <p className="text-lg mb-4 text-purple-600">–î—É–Ω–¥–∞–∂: {average}%</p>

            <button
              onClick={() => setShowPrevious(!showPrevious)}
              className="mb-3 bg-yellow-400 hover:bg-yellow-500 text-white py-2 px-4 rounded-lg font-medium shadow transition"
            >
              {showPrevious ? "”®–º–Ω”©—Ö –æ–Ω–æ–æ —Ö–∞–∞—Ö" : "”®–º–Ω”©—Ö –æ–Ω–æ–æ —Ö–∞—Ä–∞—Ö"}
            </button>

            {showPrevious && previousScores.length > 0 && (
              <div className="mb-4 max-h-40 overflow-y-auto p-3 border rounded-xl bg-gray-50">
                {previousScores.map((s, i) => (
                  <div
                    key={i}
                    className="text-sm text-gray-700 py-1 border-b last:border-b-0"
                  >
                    –¢–µ—Å—Ç {i + 1}:{" "}
                    <span className="font-semibold">{s} –æ–Ω–æ–æ</span>
                  </div>
                ))}
              </div>
            )}

            <div className="flex gap-4 justify-center mt-6">
              <button
                onClick={restartQuiz}
                className="bg-green-500 hover:bg-green-600 text-white py-2 px-6 rounded-xl font-semibold shadow transition"
              >
                –î–∞—Ö–∏–Ω —ç—Ö–ª—ç—Ö
              </button>

              <Link
                href="/buleg1"
                className="bg-red-500 hover:bg-red-600 text-white py-2 px-6 rounded-xl font-semibold shadow transition"
              >
                –ì–∞—Ä–∞—Ö
              </Link>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
